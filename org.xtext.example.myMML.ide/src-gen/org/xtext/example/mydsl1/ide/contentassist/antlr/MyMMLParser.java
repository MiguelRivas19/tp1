/*
 * generated by Xtext 2.19.0
 */
package org.xtext.example.mydsl1.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.mydsl1.ide.contentassist.antlr.internal.InternalMyMMLParser;
import org.xtext.example.mydsl1.services.MyMMLGrammarAccess;

public class MyMMLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MyMMLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MyMMLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getElementAccess().getAlternatives(), "rule__Element__Alternatives");
			builder.put(grammarAccess.getAlgoAccess().getAlternatives(), "rule__Algo__Alternatives");
			builder.put(grammarAccess.getStrategyAccess().getAlternatives(), "rule__Strategy__Alternatives");
			builder.put(grammarAccess.getDisplayParamsAccess().getAlternatives(), "rule__DisplayParams__Alternatives");
			builder.put(grammarAccess.getMMLGeneratorAccess().getGroup(), "rule__MMLGenerator__Group__0");
			builder.put(grammarAccess.getStrategySetAccess().getGroup(), "rule__StrategySet__Group__0");
			builder.put(grammarAccess.getResultDisplayParamsSetAccess().getGroup(), "rule__ResultDisplayParamsSet__Group__0");
			builder.put(grammarAccess.getPutInAccess().getGroup(), "rule__PutIn__Group__0");
			builder.put(grammarAccess.getFileSetAccess().getGroup(), "rule__FileSet__Group__0");
			builder.put(grammarAccess.getPredictiveColumnsAccess().getGroup(), "rule__PredictiveColumns__Group__0");
			builder.put(grammarAccess.getCibleColumnAccess().getGroup(), "rule__CibleColumn__Group__0");
			builder.put(grammarAccess.getTestValueSizeAccess().getGroup(), "rule__TestValueSize__Group__0");
			builder.put(grammarAccess.getTrainValueSizeAccess().getGroup(), "rule__TrainValueSize__Group__0");
			builder.put(grammarAccess.getAlgorithmSetAccess().getGroup(), "rule__AlgorithmSet__Group__0");
			builder.put(grammarAccess.getMMLGeneratorAccess().getStrategySetAssignment_0(), "rule__MMLGenerator__StrategySetAssignment_0");
			builder.put(grammarAccess.getMMLGeneratorAccess().getInstructionsAssignment_1(), "rule__MMLGenerator__InstructionsAssignment_1");
			builder.put(grammarAccess.getMMLGeneratorAccess().getResultDisplayParamsSetAssignment_2(), "rule__MMLGenerator__ResultDisplayParamsSetAssignment_2");
			builder.put(grammarAccess.getStrategySetAccess().getStrategyAssignment_1(), "rule__StrategySet__StrategyAssignment_1");
			builder.put(grammarAccess.getResultDisplayParamsSetAccess().getParamsAssignment_1(), "rule__ResultDisplayParamsSet__ParamsAssignment_1");
			builder.put(grammarAccess.getPutInAccess().getPutIdAssignment_1(), "rule__PutIn__PutIdAssignment_1");
			builder.put(grammarAccess.getPutInAccess().getValueAssignment_2(), "rule__PutIn__ValueAssignment_2");
			builder.put(grammarAccess.getFileSetAccess().getTextAssignment_2(), "rule__FileSet__TextAssignment_2");
			builder.put(grammarAccess.getPredictiveColumnsAccess().getColumnAssignment_2(), "rule__PredictiveColumns__ColumnAssignment_2");
			builder.put(grammarAccess.getCibleColumnAccess().getColumnAssignment_2(), "rule__CibleColumn__ColumnAssignment_2");
			builder.put(grammarAccess.getTestValueSizeAccess().getSizeAssignment_2(), "rule__TestValueSize__SizeAssignment_2");
			builder.put(grammarAccess.getTrainValueSizeAccess().getSizeAssignment_2(), "rule__TrainValueSize__SizeAssignment_2");
			builder.put(grammarAccess.getAlgorithmSetAccess().getAlgoNameAssignment_2(), "rule__AlgorithmSet__AlgoNameAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MyMMLGrammarAccess grammarAccess;

	@Override
	protected InternalMyMMLParser createParser() {
		InternalMyMMLParser result = new InternalMyMMLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyMMLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyMMLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
