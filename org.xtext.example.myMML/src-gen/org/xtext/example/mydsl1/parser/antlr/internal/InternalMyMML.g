/*
 * generated by Xtext 2.19.0
 */
grammar InternalMyMML;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl1.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl1.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl1.services.MyMMLGrammarAccess;

}

@parser::members {

 	private MyMMLGrammarAccess grammarAccess;

    public InternalMyMMLParser(TokenStream input, MyMMLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "MMLGenerator";
   	}

   	@Override
   	protected MyMMLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleMMLGenerator
entryRuleMMLGenerator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMMLGeneratorRule()); }
	iv_ruleMMLGenerator=ruleMMLGenerator
	{ $current=$iv_ruleMMLGenerator.current; }
	EOF;

// Rule MMLGenerator
ruleMMLGenerator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getMMLGeneratorAccess().getInstructionsInstructionParserRuleCall_0());
			}
			lv_instructions_0_0=ruleInstruction
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getMMLGeneratorRule());
				}
				add(
					$current,
					"instructions",
					lv_instructions_0_0,
					"org.xtext.example.mydsl1.MyMML.Instruction");
				afterParserOrEnumRuleCall();
			}
		)
	)+
;

// Entry rule entryRuleInstruction
entryRuleInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInstructionRule()); }
	iv_ruleInstruction=ruleInstruction
	{ $current=$iv_ruleInstruction.current; }
	EOF;

// Rule Instruction
ruleInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getInstructionAccess().getPutInParserRuleCall());
	}
	this_PutIn_0=rulePutIn
	{
		$current = $this_PutIn_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRulePutIn
entryRulePutIn returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPutInRule()); }
	iv_rulePutIn=rulePutIn
	{ $current=$iv_rulePutIn.current; }
	EOF;

// Rule PutIn
rulePutIn returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='putIn'
		{
			newLeafNode(otherlv_0, grammarAccess.getPutInAccess().getPutInKeyword_0());
		}
		(
			(
				lv_putId_1_0=RULE_ID
				{
					newLeafNode(lv_putId_1_0, grammarAccess.getPutInAccess().getPutIdIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPutInRule());
					}
					setWithLastConsumed(
						$current,
						"putId",
						lv_putId_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPutInAccess().getValueElementParserRuleCall_2_0());
				}
				lv_value_2_0=ruleElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPutInRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"org.xtext.example.mydsl1.MyMML.Element");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleElement
entryRuleElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElementRule()); }
	iv_ruleElement=ruleElement
	{ $current=$iv_ruleElement.current; }
	EOF;

// Rule Element
ruleElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getElementAccess().getFileSetParserRuleCall_0());
		}
		this_FileSet_0=ruleFileSet
		{
			$current = $this_FileSet_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementAccess().getPredictiveColumnsParserRuleCall_1());
		}
		this_PredictiveColumns_1=rulePredictiveColumns
		{
			$current = $this_PredictiveColumns_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementAccess().getCibleColumnParserRuleCall_2());
		}
		this_CibleColumn_2=ruleCibleColumn
		{
			$current = $this_CibleColumn_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementAccess().getTestValueSizeParserRuleCall_3());
		}
		this_TestValueSize_3=ruleTestValueSize
		{
			$current = $this_TestValueSize_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementAccess().getTrainValueSizeParserRuleCall_4());
		}
		this_TrainValueSize_4=ruleTrainValueSize
		{
			$current = $this_TrainValueSize_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementAccess().getAlgorithmSetParserRuleCall_5());
		}
		this_AlgorithmSet_5=ruleAlgorithmSet
		{
			$current = $this_AlgorithmSet_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFileSet
entryRuleFileSet returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFileSetRule()); }
	iv_ruleFileSet=ruleFileSet
	{ $current=$iv_ruleFileSet.current; }
	EOF;

// Rule FileSet
ruleFileSet returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='fileSet'
		{
			newLeafNode(otherlv_0, grammarAccess.getFileSetAccess().getFileSetKeyword_0());
		}
		otherlv_1='<'
		{
			newLeafNode(otherlv_1, grammarAccess.getFileSetAccess().getLessThanSignKeyword_1());
		}
		(
			(
				lv_text_2_0=RULE_STRING
				{
					newLeafNode(lv_text_2_0, grammarAccess.getFileSetAccess().getTextSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFileSetRule());
					}
					setWithLastConsumed(
						$current,
						"text",
						lv_text_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_3='>'
		{
			newLeafNode(otherlv_3, grammarAccess.getFileSetAccess().getGreaterThanSignKeyword_3());
		}
	)
;

// Entry rule entryRulePredictiveColumns
entryRulePredictiveColumns returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPredictiveColumnsRule()); }
	iv_rulePredictiveColumns=rulePredictiveColumns
	{ $current=$iv_rulePredictiveColumns.current; }
	EOF;

// Rule PredictiveColumns
rulePredictiveColumns returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='predictiveColumns'
		{
			newLeafNode(otherlv_0, grammarAccess.getPredictiveColumnsAccess().getPredictiveColumnsKeyword_0());
		}
		otherlv_1='<'
		{
			newLeafNode(otherlv_1, grammarAccess.getPredictiveColumnsAccess().getLessThanSignKeyword_1());
		}
		(
			(
				lv_column_2_0=RULE_STRING
				{
					newLeafNode(lv_column_2_0, grammarAccess.getPredictiveColumnsAccess().getColumnSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPredictiveColumnsRule());
					}
					setWithLastConsumed(
						$current,
						"column",
						lv_column_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_3='>'
		{
			newLeafNode(otherlv_3, grammarAccess.getPredictiveColumnsAccess().getGreaterThanSignKeyword_3());
		}
	)
;

// Entry rule entryRuleCibleColumn
entryRuleCibleColumn returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCibleColumnRule()); }
	iv_ruleCibleColumn=ruleCibleColumn
	{ $current=$iv_ruleCibleColumn.current; }
	EOF;

// Rule CibleColumn
ruleCibleColumn returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='CibleColumn'
		{
			newLeafNode(otherlv_0, grammarAccess.getCibleColumnAccess().getCibleColumnKeyword_0());
		}
		otherlv_1='<'
		{
			newLeafNode(otherlv_1, grammarAccess.getCibleColumnAccess().getLessThanSignKeyword_1());
		}
		(
			(
				lv_column_2_0=RULE_STRING
				{
					newLeafNode(lv_column_2_0, grammarAccess.getCibleColumnAccess().getColumnSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCibleColumnRule());
					}
					setWithLastConsumed(
						$current,
						"column",
						lv_column_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_3='>'
		{
			newLeafNode(otherlv_3, grammarAccess.getCibleColumnAccess().getGreaterThanSignKeyword_3());
		}
	)
;

// Entry rule entryRuleTestValueSize
entryRuleTestValueSize returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTestValueSizeRule()); }
	iv_ruleTestValueSize=ruleTestValueSize
	{ $current=$iv_ruleTestValueSize.current; }
	EOF;

// Rule TestValueSize
ruleTestValueSize returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='testValueSize'
		{
			newLeafNode(otherlv_0, grammarAccess.getTestValueSizeAccess().getTestValueSizeKeyword_0());
		}
		otherlv_1='<'
		{
			newLeafNode(otherlv_1, grammarAccess.getTestValueSizeAccess().getLessThanSignKeyword_1());
		}
		(
			(
				lv_size_2_0=RULE_INT
				{
					newLeafNode(lv_size_2_0, grammarAccess.getTestValueSizeAccess().getSizeINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTestValueSizeRule());
					}
					setWithLastConsumed(
						$current,
						"size",
						lv_size_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_3='>'
		{
			newLeafNode(otherlv_3, grammarAccess.getTestValueSizeAccess().getGreaterThanSignKeyword_3());
		}
	)
;

// Entry rule entryRuleTrainValueSize
entryRuleTrainValueSize returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTrainValueSizeRule()); }
	iv_ruleTrainValueSize=ruleTrainValueSize
	{ $current=$iv_ruleTrainValueSize.current; }
	EOF;

// Rule TrainValueSize
ruleTrainValueSize returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='trainValueSize'
		{
			newLeafNode(otherlv_0, grammarAccess.getTrainValueSizeAccess().getTrainValueSizeKeyword_0());
		}
		otherlv_1='<'
		{
			newLeafNode(otherlv_1, grammarAccess.getTrainValueSizeAccess().getLessThanSignKeyword_1());
		}
		(
			(
				lv_size_2_0=RULE_INT
				{
					newLeafNode(lv_size_2_0, grammarAccess.getTrainValueSizeAccess().getSizeINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTrainValueSizeRule());
					}
					setWithLastConsumed(
						$current,
						"size",
						lv_size_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_3='>'
		{
			newLeafNode(otherlv_3, grammarAccess.getTrainValueSizeAccess().getGreaterThanSignKeyword_3());
		}
	)
;

// Entry rule entryRuleAlgorithmSet
entryRuleAlgorithmSet returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAlgorithmSetRule()); }
	iv_ruleAlgorithmSet=ruleAlgorithmSet
	{ $current=$iv_ruleAlgorithmSet.current; }
	EOF;

// Rule AlgorithmSet
ruleAlgorithmSet returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='algorithmSet'
		{
			newLeafNode(otherlv_0, grammarAccess.getAlgorithmSetAccess().getAlgorithmSetKeyword_0());
		}
		otherlv_1='<'
		{
			newLeafNode(otherlv_1, grammarAccess.getAlgorithmSetAccess().getLessThanSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAlgorithmSetAccess().getAlgoNameAlgoEnumRuleCall_2_0());
				}
				lv_algoName_2_0=ruleAlgo
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAlgorithmSetRule());
					}
					set(
						$current,
						"algoName",
						lv_algoName_2_0,
						"org.xtext.example.mydsl1.MyMML.Algo");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='>'
		{
			newLeafNode(otherlv_3, grammarAccess.getAlgorithmSetAccess().getGreaterThanSignKeyword_3());
		}
	)
;

// Rule Algo
ruleAlgo returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='DecisionTreeClassifier'
			{
				$current = grammarAccess.getAlgoAccess().getDecisionTreeClassifierEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getAlgoAccess().getDecisionTreeClassifierEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='SVM'
			{
				$current = grammarAccess.getAlgoAccess().getSVMEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getAlgoAccess().getSVMEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='J48'
			{
				$current = grammarAccess.getAlgoAccess().getJ48EnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getAlgoAccess().getJ48EnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='NaiveBayes'
			{
				$current = grammarAccess.getAlgoAccess().getNaiveBayesEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getAlgoAccess().getNaiveBayesEnumLiteralDeclaration_3());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
