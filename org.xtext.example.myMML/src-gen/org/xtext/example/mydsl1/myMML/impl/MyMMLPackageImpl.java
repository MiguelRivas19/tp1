/**
 * generated by Xtext 2.19.0
 */
package org.xtext.example.mydsl1.myMML.impl;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

import org.xtext.example.mydsl1.myMML.Algo;
import org.xtext.example.mydsl1.myMML.AlgorithmSet;
import org.xtext.example.mydsl1.myMML.CibleColumn;
import org.xtext.example.mydsl1.myMML.Element;
import org.xtext.example.mydsl1.myMML.FileSet;
import org.xtext.example.mydsl1.myMML.Instruction;
import org.xtext.example.mydsl1.myMML.MMLGenerator;
import org.xtext.example.mydsl1.myMML.MyMMLFactory;
import org.xtext.example.mydsl1.myMML.MyMMLPackage;
import org.xtext.example.mydsl1.myMML.PredictiveColumns;
import org.xtext.example.mydsl1.myMML.PutIn;
import org.xtext.example.mydsl1.myMML.TestValueSize;
import org.xtext.example.mydsl1.myMML.TrainValueSize;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MyMMLPackageImpl extends EPackageImpl implements MyMMLPackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass mmlGeneratorEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass instructionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass putInEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass elementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass fileSetEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass predictiveColumnsEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass cibleColumnEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass testValueSizeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass trainValueSizeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass algorithmSetEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum algoEEnum = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see org.xtext.example.mydsl1.myMML.MyMMLPackage#eNS_URI
   * @see #init()
   * @generated
   */
  private MyMMLPackageImpl()
  {
    super(eNS_URI, MyMMLFactory.eINSTANCE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   *
   * <p>This method is used to initialize {@link MyMMLPackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static MyMMLPackage init()
  {
    if (isInited) return (MyMMLPackage)EPackage.Registry.INSTANCE.getEPackage(MyMMLPackage.eNS_URI);

    // Obtain or create and register package
    Object registeredMyMMLPackage = EPackage.Registry.INSTANCE.get(eNS_URI);
    MyMMLPackageImpl theMyMMLPackage = registeredMyMMLPackage instanceof MyMMLPackageImpl ? (MyMMLPackageImpl)registeredMyMMLPackage : new MyMMLPackageImpl();

    isInited = true;

    // Create package meta-data objects
    theMyMMLPackage.createPackageContents();

    // Initialize created meta-data
    theMyMMLPackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theMyMMLPackage.freeze();

    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(MyMMLPackage.eNS_URI, theMyMMLPackage);
    return theMyMMLPackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getMMLGenerator()
  {
    return mmlGeneratorEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMMLGenerator_Instructions()
  {
    return (EReference)mmlGeneratorEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getInstruction()
  {
    return instructionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getPutIn()
  {
    return putInEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getPutIn_PutId()
  {
    return (EAttribute)putInEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getPutIn_Value()
  {
    return (EReference)putInEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getElement()
  {
    return elementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getFileSet()
  {
    return fileSetEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getFileSet_Text()
  {
    return (EAttribute)fileSetEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getPredictiveColumns()
  {
    return predictiveColumnsEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getPredictiveColumns_Column()
  {
    return (EAttribute)predictiveColumnsEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCibleColumn()
  {
    return cibleColumnEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCibleColumn_Column()
  {
    return (EAttribute)cibleColumnEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getTestValueSize()
  {
    return testValueSizeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getTestValueSize_Size()
  {
    return (EAttribute)testValueSizeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getTrainValueSize()
  {
    return trainValueSizeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getTrainValueSize_Size()
  {
    return (EAttribute)trainValueSizeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAlgorithmSet()
  {
    return algorithmSetEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAlgorithmSet_AlgoName()
  {
    return (EAttribute)algorithmSetEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getAlgo()
  {
    return algoEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MyMMLFactory getMyMMLFactory()
  {
    return (MyMMLFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    mmlGeneratorEClass = createEClass(MML_GENERATOR);
    createEReference(mmlGeneratorEClass, MML_GENERATOR__INSTRUCTIONS);

    instructionEClass = createEClass(INSTRUCTION);

    putInEClass = createEClass(PUT_IN);
    createEAttribute(putInEClass, PUT_IN__PUT_ID);
    createEReference(putInEClass, PUT_IN__VALUE);

    elementEClass = createEClass(ELEMENT);

    fileSetEClass = createEClass(FILE_SET);
    createEAttribute(fileSetEClass, FILE_SET__TEXT);

    predictiveColumnsEClass = createEClass(PREDICTIVE_COLUMNS);
    createEAttribute(predictiveColumnsEClass, PREDICTIVE_COLUMNS__COLUMN);

    cibleColumnEClass = createEClass(CIBLE_COLUMN);
    createEAttribute(cibleColumnEClass, CIBLE_COLUMN__COLUMN);

    testValueSizeEClass = createEClass(TEST_VALUE_SIZE);
    createEAttribute(testValueSizeEClass, TEST_VALUE_SIZE__SIZE);

    trainValueSizeEClass = createEClass(TRAIN_VALUE_SIZE);
    createEAttribute(trainValueSizeEClass, TRAIN_VALUE_SIZE__SIZE);

    algorithmSetEClass = createEClass(ALGORITHM_SET);
    createEAttribute(algorithmSetEClass, ALGORITHM_SET__ALGO_NAME);

    // Create enums
    algoEEnum = createEEnum(ALGO);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes
    putInEClass.getESuperTypes().add(this.getInstruction());
    fileSetEClass.getESuperTypes().add(this.getElement());
    predictiveColumnsEClass.getESuperTypes().add(this.getElement());
    cibleColumnEClass.getESuperTypes().add(this.getElement());
    testValueSizeEClass.getESuperTypes().add(this.getElement());
    trainValueSizeEClass.getESuperTypes().add(this.getElement());
    algorithmSetEClass.getESuperTypes().add(this.getElement());

    // Initialize classes and features; add operations and parameters
    initEClass(mmlGeneratorEClass, MMLGenerator.class, "MMLGenerator", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getMMLGenerator_Instructions(), this.getInstruction(), null, "instructions", null, 0, -1, MMLGenerator.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(instructionEClass, Instruction.class, "Instruction", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(putInEClass, PutIn.class, "PutIn", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getPutIn_PutId(), ecorePackage.getEString(), "putId", null, 0, 1, PutIn.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getPutIn_Value(), this.getElement(), null, "value", null, 0, 1, PutIn.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(elementEClass, Element.class, "Element", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(fileSetEClass, FileSet.class, "FileSet", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getFileSet_Text(), ecorePackage.getEString(), "text", null, 0, 1, FileSet.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(predictiveColumnsEClass, PredictiveColumns.class, "PredictiveColumns", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getPredictiveColumns_Column(), ecorePackage.getEString(), "column", null, 0, 1, PredictiveColumns.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(cibleColumnEClass, CibleColumn.class, "CibleColumn", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getCibleColumn_Column(), ecorePackage.getEString(), "column", null, 0, 1, CibleColumn.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(testValueSizeEClass, TestValueSize.class, "TestValueSize", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getTestValueSize_Size(), ecorePackage.getEInt(), "size", null, 0, 1, TestValueSize.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(trainValueSizeEClass, TrainValueSize.class, "TrainValueSize", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getTrainValueSize_Size(), ecorePackage.getEInt(), "size", null, 0, 1, TrainValueSize.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(algorithmSetEClass, AlgorithmSet.class, "AlgorithmSet", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getAlgorithmSet_AlgoName(), this.getAlgo(), "algoName", null, 0, 1, AlgorithmSet.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    // Initialize enums and add enum literals
    initEEnum(algoEEnum, Algo.class, "Algo");
    addEEnumLiteral(algoEEnum, Algo.DECISION_TREE_CLASSIFIER);
    addEEnumLiteral(algoEEnum, Algo.SVM);
    addEEnumLiteral(algoEEnum, Algo.J48);
    addEEnumLiteral(algoEEnum, Algo.NAIVE_BAYES);

    // Create resource
    createResource(eNS_URI);
  }

} //MyMMLPackageImpl
